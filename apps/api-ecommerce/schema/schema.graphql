type Query {
  products(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    search: String
    categories: [String]
    minPrice: Int
    maxPrice: Int
  ): ProductConnection
  orders(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): OrderConnection
  categories(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CategoryConnection
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]

  """Total number of products"""
  count: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge"""
  node: Product

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a product"""
type Product {
  """The ID of an object"""
  id: ID!
  name: String
  price: Int
  description: String
  images: [String]
  slug: String
  category: Category
  createdAt: String
}

"""Represents a category"""
type Category {
  """The ID of an object"""
  id: ID!
  name: String
  slug: String
  products: [Product]
  image: String
  createdAt: String
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge"""
  node: Order

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a product"""
type Order {
  """The ID of an object"""
  id: ID!
  code: String
  userId: String
  orderItems: [OrderItem]!
  status: String
  price: Int
  acquiretransactionId: String
  createdAt: String
}

"""Represents an item in an order"""
type OrderItem {
  """The ID of an object"""
  id: ID!
  productId: String
  productName: String
  productDescription: String
  productImageUrl: String
  quantity: Int
  price: Int
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge"""
  node: Category

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  ProductAdd(input: ProductAddInput!): ProductAddPayload
  ProductUpdate(input: ProductUpdateInput!): ProductUpdatePayload
  ProductDelete(input: ProductDeleteInput!): ProductDeletePayload
  orderAdd(input: OrderAddInput!): OrderAddPayload
}

type ProductAddPayload {
  product: Product
  clientMutationId: String
}

input ProductAddInput {
  name: String!
  slug: String!
  description: String!
  price: Int!
  images: [String]
  category: String!
  clientMutationId: String
}

type ProductUpdatePayload {
  product: Product
  clientMutationId: String
}

input ProductUpdateInput {
  id: ID!
  name: String
  description: String
  price: Int
  images: String
  category: String
  clientMutationId: String
}

type ProductDeletePayload {
  product: Product
  clientMutationId: String
}

input ProductDeleteInput {
  id: ID!
  clientMutationId: String
}

type OrderAddPayload {
  order: Order
  clientMutationId: String
}

input OrderAddInput {
  userId: String
  items: [OrderItemInput]
  clientMutationId: String
}

input OrderItemInput {
  productId: String
  quantity: Int
}